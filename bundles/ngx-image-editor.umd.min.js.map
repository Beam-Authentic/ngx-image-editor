{
  "version": 3,
  "file": "ngx-image-editor.umd.min.js",
  "sources": [
    "ng://ngx-image-editor/out/ngx-image-editor.component.ts",
    "ng://ngx-image-editor/out/ngx-image-editor.module.ts"
  ],
  "sourcesContent": [
    "import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\n\ndeclare const Cropper: any;\n\n@Component({\n  selector: 'ngx-image-editor',\n  template: `\n      <div class=\"ngx-image-editor-component\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\">\n          <div mat-dialog-title class=\"photo-editor-header\">\n              <mat-icon>photo</mat-icon>\n              <div class=\"file-name\">{{state.ImageName}}</div>\n              <button [hidden]=\"croppedImage\" mat-icon-button color=\"accent\" matTooltip=\"Crop image\"\n                      (click)=\"handleCrop()\">\n                  <mat-icon>crop</mat-icon>\n              </button>\n              <button mat-icon-button\n                      [hidden]=\"croppedImage\"\n                      color=\"accent\"\n                      matTooltip=\"Center canvas\"\n                      (click)=\"centerCanvas()\">\n                  <mat-icon>center_focus_strong</mat-icon>\n              </button>\n          </div>\n\n          <div mat-dialog-content\n               #dialogCropContainer\n               class=\"dialog-crop-container\"\n               fxLayout=\"column\"\n               fxLayoutAlign=\"center center\"\n               fxFlex=\"grow\">\n              <ng-template [ngIf]=\"!croppedImage\">\n                  <div\n                          [style.visibility]=\"loading ? 'hidden' : 'visible'\"\n                          [style.background]=\"canvasFillColor\"\n                          class=\"img-container\">\n                      <img #previewimg\n                           [src]=\"previewImageURL\">\n                  </div>\n              </ng-template>\n              <ng-template [ngIf]=\"croppedImage && !loading\">\n                  <div class=\"cropped-image\">\n                      <img #croppedImg\n                           [ngStyle]=\"{'transform': 'scale(' + zoomIn + ')'}\"\n                           [src]=\"croppedImage\">\n                  </div>\n              </ng-template>\n              <mat-progress-spinner *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-spinner>\n          </div>\n\n          <div\n                  class=\"dialog-button-actions\"\n                  mat-dialog-actions\n                  fxLayout=\"column\"\n                  align=\"start\"\n                  fxFlex=\"nogrow\">\n\n              <div class=\"image-detail-toolbar\" fxFlex=\"100\">\n                  <div class=\"image-dimensions\"><b>Width:</b> <span>{{imageWidth}}px</span> <b>Height:</b> <span>{{imageHeight}}px</span></div>\n                  <span fxFlex></span>\n                  <div class=\"image-zoom\">\n                      <button mat-icon-button color=\"accent\" (click)=\"zoomChange(0.1, 'zoomIn')\">\n                          <mat-icon>zoom_in</mat-icon>\n                      </button>\n                      <mat-slider [value]=\"sliderValue\" (input)=\"zoomChange($event.value)\" thumbLabel></mat-slider>\n                      <button mat-icon-button color=\"accent\" (click)=\"zoomChange(-0.1, 'zoomOut')\">\n                          <mat-icon>zoom_out</mat-icon>\n                      </button>\n                  </div>\n              </div>\n              <div class=\"cropped-image-buttons\" [style.visibility]=\"!croppedImage ? 'hidden' : 'visible'\">\n                  <button mat-raised-button color=\"accent\" (click)=\"saveImage()\">\n                      <mat-icon>done</mat-icon>\n                      <span>Save</span>\n                  </button>\n                  <button mat-raised-button color=\"accent\" (click)=\"undoCrop()\">\n                      <mat-icon>undo</mat-icon>\n                      <span>Undo</span>\n                  </button>\n              </div>\n              <div fxLayout=\"row\" [style.visibility]=\"croppedImage ? 'hidden' : 'visible'\">\n                  <mat-button-toggle-group\n                          #dragMode=\"matButtonToggleGroup\"\n                          (change)=\"cropper.setDragMode($event.value)\"\n                          value=\"move\">\n                      <mat-button-toggle value=\"move\" matTooltip=\"Move mode\">\n                          <mat-icon>open_with</mat-icon>\n                      </mat-button-toggle>\n                      <mat-button-toggle value=\"crop\" matTooltip=\"Crop mode\">\n                          <mat-icon>crop</mat-icon>\n                      </mat-button-toggle>\n                  </mat-button-toggle-group>\n\n                  <mat-button-toggle-group\n                          #selectRatio=\"matButtonToggleGroup\"\n                          (change)=\"setRatio($event.value)\"\n                          value=\"{{ratios[0].value}}\">\n                      <mat-button-toggle *ngFor=\"let ratio of ratios\" value=\"{{ratio.value}}\" matTooltip=\"Aspect ratio\">\n                          {{ratio.text}}\n                      </mat-button-toggle>\n                  </mat-button-toggle-group>\n\n              </div>\n              <div\n                      class=\"canvas-config\"\n                      fxLayout=\"row\"\n                      fxLayoutAlign=\"start space-between\"\n                      fxLayoutGap=\"10px\"\n                      [style.visibility]=\"croppedImage ? 'hidden' : 'visible'\">\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"imageWidth\"\n                             placeholder=\"Canvas width\"\n                             type=\"number\"\n                             (ngModelChange)=\"setImageWidth($event)\"\n                             [ngModel]=\"canvasWidth\">\n                  </mat-form-field>\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"imageHeight\"\n                             placeholder=\"Canvas height\"\n                             type=\"number\"\n                             (ngModelChange)=\"setImageHeight($event)\"\n                             [ngModel]=\"canvasHeight\">\n                  </mat-form-field>\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"cropBoxWidth\"\n                             placeholder=\"Cropbox width\"\n                             type=\"number\"\n                             (ngModelChange)=\"setCropBoxWidth($event)\"\n                             [ngModel]=\"cropBoxWidth\">\n                  </mat-form-field>\n\n                  <mat-form-field color=\"accent\" fxFlex=\"100\">\n                      <input matInput\n                             fxFlex=\"100\"\n                             id=\"cropBoxHeight\"\n                             placeholder=\"Cropbox height\"\n                             type=\"number\"\n                             (ngModelChange)=\"setCropBoxHeight($event)\"\n                             [ngModel]=\"cropBoxHeight\">\n                  </mat-form-field>\n\n                  <!--<md2-colorpicker [(ngModel)]=\"canvasFillColor\"  placeholder=\"Canvas color\"></md2-colorpicker>-->\n\n              </div>\n          </div>\n\n      </div>\n\n  `,\n  styles: [`\n\n      .ngx-image-editor-component .photo-editor-header {\n          display: flex;\n          justify-content: space-around;\n          align-items: center;\n          width: 100%;\n          padding: 5px 0;\n          z-index: 100;\n          margin: 0;\n      }\n\n      .ngx-image-editor-component .photo-editor-header > .mat-icon {\n          padding: 0 10px;\n      }\n\n      .ngx-image-editor-component .photo-editor-header > .file-name {\n          flex: 1 1 100%;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n          overflow: hidden;\n      }\n\n      .ngx-image-editor-component mat-progress-spinner {\n          position: absolute;\n      }\n\n      .ngx-image-editor-component .dialog-crop-container {\n          width: 800px;\n          height: 400px;\n          overflow: hidden;\n      }\n\n      .ngx-image-editor-component .cropper-bg {\n          background-image: none !important;\n      }\n\n      .ngx-image-editor-component .cropper-bg > .cropper-modal {\n          opacity: 1 !important;\n          background: none;\n      }\n\n      .ngx-image-editor-component .img-container {\n          width: 800px !important;\n          height: 400px !important;\n      }\n\n      .ngx-image-editor-component .cropped-image img {\n          width: auto !important;\n          height: auto !important;\n          max-width: 800px !important;\n          max-height: 400px !important;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions {\n          position: relative;\n          padding: 0;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions:last-child {\n          margin: 0;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions > DIV mat-button-toggle-group {\n          margin: 20px;\n      }\n\n      .ngx-image-editor-component .dialog-button-actions .cropped-image-buttons {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n      }\n\n      .ngx-image-editor-component .dialog-button-actions > .canvas-config {\n          padding: 5px;\n          margin: 0 20px;\n      }\n\n      \n\n      .ngx-image-editor-component .dialog-button-actions > .canvas-config md2-colorpicker {\n          width: 200px !important;\n      }\n      \n\n      .ngx-image-editor-component .dialog-button-actions .image-detail-toolbar > .image-zoom {\n          display: flex;\n          align-items: center;\n          padding: 0 10px;\n      }\n      \n      .ngx-image-editor-component .dialog-button-actions .image-detail-toolbar > .image-zoom .mat-slider-horizontal .mat-slider-wrapper .mat-slider-thumb-container {\n          cursor: grab;\n      }\n      \n\n      .ngx-image-editor-component .dialog-button-actions .image-detail-toolbar > .image-dimensions {\n          padding: 0 10px;\n          font-size: 14px;\n          width: 200px;\n          max-width: 200px;\n      }\n\n   \n\n\n\n\n\n\n\n\n\n\n  `],\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class NgxImageEditorComponent implements AfterViewInit, OnInit, OnDestroy {\n\n  public state: EditorOptions;\n  public cropper: any;\n  public croppedImage: string;\n  public imageWidth: number;\n  public imageHeight: number;\n  public canvasWidth: number;\n  public canvasHeight: number;\n  public cropBoxWidth: number;\n  public cropBoxHeight: number;\n  public canvasFillColor: string;\n  public blob: Blob;\n  public loading: boolean;\n  private zoomIn: number;\n  public sliderValue: number;\n  public ratios: NgxAspectRatio[];\n  public previewImageURL: any;\n\n  @ViewChild('previewimg')\n  public previewImage: any;\n\n  @ViewChild('croppedImg')\n  public croppedImg: any;\n\n  @Input()\n  public set config(config: EditorOptions) {\n    this.state = config;\n  }\n\n  @Output()\n  public file: EventEmitter<Blob> = new EventEmitter<Blob>();\n\n  public constructor() {\n    this.zoomIn          = 0;\n    this.sliderValue     = 0;\n    this.loading         = true;\n    this.canvasFillColor = '#fff';\n    this.state           = new EditorOptions();\n  }\n\n  public ngOnInit() {\n    this.handleStateConfig();\n  }\n\n  public ngOnDestroy() {\n    this.cropper.destroy();\n  }\n\n  public ngAfterViewInit(): void {\n\n    // NOTE if we don't have a file meaning that loading the image will happen synchronously we can safely\n    // call initializeCropper in ngAfterViewInit. otherwise if we are using the FileReader to load a base64 image\n    // we need to call onloadend asynchronously..\n    if (!this.state.File && this.state.ImageUrl) {\n      this.initializeCropper();\n    }\n  }\n\n  private handleStateConfig() {\n    this.state.ImageType = this.state.ImageType ? this.state.ImageType : 'image/jpeg';\n\n    if (this.state.ImageUrl) {\n      this.state.File      = null;\n      this.previewImageURL = this.state.ImageUrl;\n    }\n\n    if (this.state.File) {\n      this.state.ImageUrl = null;\n      this.convertFileToBase64(this.state.File);\n    }\n\n    if (this.state.AspectRatios) {\n      this.addRatios(this.state.AspectRatios);\n    } else {\n      this.ratios = NGX_DEFAULT_RATIOS;\n    }\n\n\n    if (!this.state.ImageUrl && !this.state.File) {\n      console.error(\"Property ImageUrl or File is missing, Please provide an url or file in the config options.\");\n    }\n\n    if (!this.state.ImageName) {\n      console.error(\"Property ImageName is missing, Please provide a name for the image.\");\n    }\n  }\n\n  private convertFileToBase64(file: File) {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", (e: any) => {\n      this.previewImageURL = e.target[\"result\"];\n    }, false);\n    reader.readAsDataURL(file);\n    reader.onloadend = (() => {\n      // NOTE since getting the base64 image url happens asynchronously we need to initializeCropper after\n      // the image has been loaded.\n      this.initializeCropper();\n    });\n  }\n\n  private addRatios(ratios: RatioType[]) {\n    this.ratios = [];\n    ratios.forEach((ratioType: RatioType) => {\n      const addedRation = NGX_DEFAULT_RATIOS.find((ratio: NgxAspectRatio) => {\n        return ratio.text === ratioType;\n      });\n      this.ratios.push(addedRation);\n    });\n  }\n\n  public handleCrop() {\n\n    this.loading = true;\n    setTimeout(() => {\n      this.croppedImage = this.cropper.getCroppedCanvas({fillColor: this.canvasFillColor})\n        .toDataURL(this.state.ImageType);\n\n      setTimeout(() => {\n        this.imageWidth  = this.croppedImg.nativeElement.width;\n        this.imageHeight = this.croppedImg.nativeElement.height;\n      });\n      this.cropper.getCroppedCanvas({fillColor: this.canvasFillColor}).toBlob((blob: Blob) => {\n        this.blob = blob;\n      });\n      this.zoomIn  = 1;\n      this.loading = false;\n    }, 2000);\n  }\n\n  public undoCrop() {\n    this.croppedImage = null;\n    this.blob         = null;\n    setTimeout(() => {\n      this.initializeCropper();\n    }, 100);\n\n  }\n\n  public saveImage() {\n    this.file.emit(new Blob([this.blob], {type: this.state.ImageType}));\n  }\n\n  private initializeCropper() {\n    this.cropper = new Cropper(this.previewImage.nativeElement, {\n      zoomOnWheel: true,\n      viewMode: 0,\n      center: true,\n      ready: () => this.loading = false,\n      dragMode: 'move',\n      crop: (e: CustomEvent) => {\n        this.imageHeight   = Math.round(e.detail.height);\n        this.imageWidth    = Math.round(e.detail.width);\n        this.cropBoxWidth  = Math.round(this.cropper.getCropBoxData().width);\n        this.cropBoxHeight = Math.round(this.cropper.getCropBoxData().height);\n        this.canvasWidth   = Math.round(this.cropper.getCanvasData().width);\n        this.canvasHeight  = Math.round(this.cropper.getCanvasData().height);\n      }\n    });\n\n    this.setRatio(this.ratios[0].value);\n  }\n\n  public setRatio(value: any) {\n    this.cropper.setAspectRatio(value);\n  }\n\n  public zoomChange(input: any, zoom?: string) {\n    if (this.croppedImage) {\n      if (zoom) {\n        zoom === 'zoomIn' ? this.zoomIn += 0.1 : this.zoomIn -= 0.1;\n      } else {\n        if (input < this.sliderValue) {\n          this.zoomIn = -Math.abs(input / 100);\n        } else {\n          this.zoomIn = Math.abs(input / 100);\n        }\n      }\n      if (this.zoomIn <= 0.1) {\n        this.zoomIn = 0.1;\n      }\n    } else {\n      if (zoom) {\n        this.cropper.zoom(input);\n        this.zoomIn = input;\n      } else {\n        if (input < this.sliderValue) {\n          this.cropper.zoom(-Math.abs(input / 100));\n        } else {\n          this.cropper.zoom(Math.abs(input / 100));\n        }\n        if (input === 0) {\n          this.cropper.zoom(-1);\n        }\n      }\n    }\n\n    if (!zoom) {\n      this.sliderValue = input;\n    } else {\n      input > 0 ? this.sliderValue += Math.abs(input * 100) : this.sliderValue -= Math.abs(input * 100);\n    }\n\n    if (this.sliderValue < 0) {\n      this.sliderValue = 0;\n    }\n  }\n\n  public setImageWidth(canvasWidth: number) {\n    if (canvasWidth) {\n      this.cropper.setCanvasData({\n        left: this.cropper.getCanvasData().left,\n        top: this.cropper.getCanvasData().top,\n        width: Math.round(canvasWidth),\n        height: this.cropper.getCanvasData().height\n      });\n    }\n  }\n\n  public setImageHeight(canvasHeight: number) {\n    if (canvasHeight) {\n      this.cropper.setCanvasData({\n        left: this.cropper.getCanvasData().left,\n        top: this.cropper.getCanvasData().top,\n        width: this.cropper.getCanvasData().width,\n        height: Math.round(canvasHeight)\n      });\n    }\n  }\n\n  public setCropBoxWidth(cropBoxWidth: number) {\n    if (cropBoxWidth) {\n      this.cropper.setCropBoxData({\n        left: this.cropper.getCropBoxData().left,\n        top: this.cropper.getCropBoxData().top,\n        width: Math.round(cropBoxWidth),\n        height: this.cropper.getCropBoxData().height\n      });\n    }\n  }\n\n  public setCropBoxHeight(cropBoxHeight: number) {\n    if (cropBoxHeight) {\n      this.cropper.setCropBoxData({\n        left: this.cropper.getCropBoxData().left,\n        top: this.cropper.getCropBoxData().top,\n        width: this.cropper.getCropBoxData().width,\n        height: Math.round(cropBoxHeight)\n      });\n    }\n  }\n\n  public centerCanvas() {\n    const cropBoxLeft = (this.cropper.getContainerData().width - this.cropper.getCropBoxData().width) / 2;\n    const cropBoxTop  = (this.cropper.getContainerData().height - this.cropper.getCropBoxData().height) / 2;\n    const canvasLeft  = (this.cropper.getContainerData().width - this.cropper.getCanvasData().width) / 2;\n    const canvasTop   = (this.cropper.getContainerData().height - this.cropper.getCanvasData().height) / 2;\n\n    this.cropper.setCropBoxData({\n      left: cropBoxLeft,\n      top: cropBoxTop,\n      width: this.cropper.getCropBoxData().width,\n      height: this.cropper.getCropBoxData().height\n    });\n    this.cropper.setCanvasData({\n      left: canvasLeft,\n      top: canvasTop,\n      width: this.cropper.getCanvasData().width,\n      height: this.cropper.getCanvasData().height\n    });\n  }\n\n}\n\n\nexport interface IEditorOptions {\n  ImageName: string;\n  ImageUrl?: string;\n  ImageType?: string;\n  File?: File;\n  AspectRatios?: Array<RatioType>;\n}\n\nexport type RatioType = \"16:9\" | '4:3' | '1:1' | '2:3' | 'Default';\n\nexport class EditorOptions implements IEditorOptions {\n  ImageName: string;\n  ImageUrl?: string;\n  ImageType?: string;\n  File?: File;\n  AspectRatios?: Array<RatioType>;\n}\n\n\nexport interface NgxAspectRatio {\n  value: number;\n  text: RatioType;\n}\n\n\n\nexport const NGX_DEFAULT_RATIOS: Array<NgxAspectRatio> = [\n  {\n    value: 16 / 9, text: '16:9'\n  },\n  {\n    value: 4 / 3, text: '4:3'\n  },\n  {\n    value: 1 / 1, text: '1:1'\n  },\n  {\n    value: 2 / 3, text: '2:3'\n  },\n  {\n    value: 0 / 0, text: 'Default'\n  }\n];\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgxImageEditorComponent} from './ngx-image-editor.component';\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\nimport {\n    MatAutocompleteModule,\n    MatButtonModule, MatButtonToggleModule, MatIconModule, MatInputModule, MatMenuModule, MatProgressSpinnerModule,\n    MatSliderModule,MatDialogModule,\n    MatTabsModule, MatTooltipModule\n} from \"@angular/material\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {CommonModule} from \"@angular/common\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n\nexport * from './ngx-image-editor.component';\n\n@NgModule({\n\n    imports: [\n        FormsModule,\n        BrowserAnimationsModule,\n        CommonModule,\n        ReactiveFormsModule,\n        FlexLayoutModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        MatInputModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        MatTabsModule,\n        MatTooltipModule,\n        MatButtonToggleModule,\n        MatSliderModule,\n        MatAutocompleteModule\n    ],\n    declarations: [\n        NgxImageEditorComponent\n    ],\n    exports: [NgxImageEditorComponent]\n})\n\n\nexport class NgxImageEditorModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: NgxImageEditorModule,\n        };\n    }\n}\n"
  ],
  "names": [
    "NgxImageEditorComponent",
    "this",
    "file",
    "EventEmitter",
    "zoomIn",
    "sliderValue",
    "loading",
    "canvasFillColor",
    "state",
    "EditorOptions",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "config",
    "ngOnInit",
    "handleStateConfig",
    "ngOnDestroy",
    "cropper",
    "destroy",
    "ngAfterViewInit",
    "File",
    "ImageUrl",
    "initializeCropper",
    "ImageType",
    "previewImageURL",
    "convertFileToBase64",
    "AspectRatios",
    "addRatios",
    "ratios",
    "NGX_DEFAULT_RATIOS",
    "console",
    "error",
    "ImageName",
    "_this",
    "reader",
    "FileReader",
    "addEventListener",
    "e",
    "target",
    "readAsDataURL",
    "onloadend",
    "forEach",
    "ratioType",
    "addedRation",
    "find",
    "ratio",
    "text",
    "push",
    "handleCrop",
    "setTimeout",
    "croppedImage",
    "getCroppedCanvas",
    "fillColor",
    "toDataURL",
    "imageWidth",
    "croppedImg",
    "nativeElement",
    "width",
    "imageHeight",
    "height",
    "toBlob",
    "blob",
    "undoCrop",
    "saveImage",
    "emit",
    "Blob",
    "type",
    "Cropper",
    "previewImage",
    "zoomOnWheel",
    "viewMode",
    "center",
    "ready",
    "dragMode",
    "crop",
    "Math",
    "round",
    "detail",
    "cropBoxWidth",
    "getCropBoxData",
    "cropBoxHeight",
    "canvasWidth",
    "getCanvasData",
    "canvasHeight",
    "setRatio",
    "value",
    "setAspectRatio",
    "zoomChange",
    "input",
    "zoom",
    "abs",
    "setImageWidth",
    "setCanvasData",
    "left",
    "top",
    "setImageHeight",
    "setCropBoxWidth",
    "setCropBoxData",
    "setCropBoxHeight",
    "centerCanvas",
    "cropBoxLeft",
    "getContainerData",
    "cropBoxTop",
    "canvasLeft",
    "canvasTop",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "ViewChild",
    "Input",
    "Output",
    "NgxImageEditorModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "imports",
    "FormsModule",
    "BrowserAnimationsModule",
    "CommonModule",
    "ReactiveFormsModule",
    "FlexLayoutModule",
    "MatButtonModule",
    "MatIconModule",
    "MatDialogModule",
    "MatInputModule",
    "MatMenuModule",
    "MatProgressSpinnerModule",
    "MatTabsModule",
    "MatTooltipModule",
    "MatButtonToggleModule",
    "MatSliderModule",
    "MatAutocompleteModule",
    "declarations",
    "exports"
  ],
  "mappings": "woBAAA,IAAAA,EAAA,wBA6TAC,KAAAC,KAAoC,IAAIC,EAAAA,aAGpCF,KAAKG,OAAkB,EACvBH,KAAKI,YAAkB,EACvBJ,KAAKK,SAAkB,EACvBL,KAAKM,gBAAkB,OACvBN,KAAKO,MAAkB,IAAIC,SAZ/BC,OAAAC,eAAaX,EAAbY,UAAA,SAAA,CAAAC,IAAA,SAAoBC,GAChBb,KAAKO,MAAQM,mCAcRd,EAATY,UAAAG,SAAS,WACLd,KAAKe,qBAGAhB,EAATY,UAAAK,YAAS,WACLhB,KAAKiB,QAAQC,WAGRnB,EAATY,UAAAQ,gBAAS,YAKAnB,KAAKO,MAAMa,MAAQpB,KAAKO,MAAMc,UACjCrB,KAAKsB,qBAIDvB,EAAVY,UAAAI,kBAAU,WACNf,KAAKO,MAAMgB,UAAYvB,KAAKO,MAAMgB,UAAYvB,KAAKO,MAAMgB,UAAY,aAEjEvB,KAAKO,MAAMc,WACbrB,KAAKO,MAAMa,KAAY,KACvBpB,KAAKwB,gBAAkBxB,KAAKO,MAAMc,UAGhCrB,KAAKO,MAAMa,OACbpB,KAAKO,MAAMc,SAAW,KACtBrB,KAAKyB,oBAAoBzB,KAAKO,MAAMa,OAGlCpB,KAAKO,MAAMmB,aACb1B,KAAK2B,UAAU3B,KAAKO,MAAMmB,cAE1B1B,KAAK4B,OAASC,EAIX7B,KAAKO,MAAMc,UAAarB,KAAKO,MAAMa,MACtCU,QAAQC,MAAM,8FAGX/B,KAAKO,MAAMyB,WACdF,QAAQC,MAAM,wEAIVhC,EAAVY,UAAAc,oBAAU,SAAoBxB,GAApB,IAAVgC,EAAAjC,KACUkC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,OAAQ,SAACC,GAC/BJ,EAAKT,gBAAkBa,EAAEC,OAAe,SACvC,GACHJ,EAAOK,cAActC,GACrBiC,EAAOM,UAAS,WAGdP,EAAKX,sBAIDvB,EAAVY,UAAAgB,UAAU,SAAUC,GAAV,IAAVK,EAAAjC,KACIA,KAAK4B,OAAS,GACdA,EAAOa,QAAQ,SAACC,GACd,IAAMC,EAAcd,EAAmBe,KAAK,SAACC,GAC3C,OAAOA,EAAMC,OAASJ,IAExBT,EAAKL,OAAOmB,KAAKJ,MAId5C,EAATY,UAAAqC,WAAS,WAAA,IAATf,EAAAjC,KAEIA,KAAKK,SAAU,EACf4C,WAAW,WACThB,EAAKiB,aAAejB,EAAKhB,QAAQkC,iBAAiB,CAACC,UAAWnB,EAAK3B,kBAChE+C,UAAUpB,EAAK1B,MAAMgB,WAExB0B,WAAW,WACThB,EAAKqB,WAAcrB,EAAKsB,WAAWC,cAAcC,MACjDxB,EAAKyB,YAAczB,EAAKsB,WAAWC,cAAcG,SAEnD1B,EAAKhB,QAAQkC,iBAAiB,CAACC,UAAWnB,EAAK3B,kBAAkBsD,OAAO,SAACC,GACvE5B,EAAK4B,KAAOA,IAEd5B,EAAK9B,OAAU,EACf8B,EAAK5B,SAAU,GACd,MAGEN,EAATY,UAAAmD,SAAS,WAAA,IAAT7B,EAAAjC,KACIA,KAAKkD,aAAe,KACpBlD,KAAK6D,KAAe,KACpBZ,WAAW,WACThB,EAAKX,qBACJ,MAIEvB,EAATY,UAAAoD,UAAS,WACL/D,KAAKC,KAAK+D,KAAK,IAAIC,KAAK,CAACjE,KAAK6D,MAAO,CAACK,KAAMlE,KAAKO,MAAMgB,cAGjDxB,EAAVY,UAAAW,kBAAU,WAAA,IAAVW,EAAAjC,KACIA,KAAKiB,QAAU,IAAIkD,QAAQnE,KAAKoE,aAAaZ,cAAe,CAC1Da,aAAa,EACbC,SAAU,EACVC,QAAQ,EACRC,MAAO,WAAM,OAAAvC,EAAK5B,SAAU,GAC5BoE,SAAU,OACVC,KAAM,SAACrC,GACLJ,EAAKyB,YAAgBiB,KAAKC,MAAMvC,EAAEwC,OAAOlB,QACzC1B,EAAKqB,WAAgBqB,KAAKC,MAAMvC,EAAEwC,OAAOpB,OACzCxB,EAAK6C,aAAgBH,KAAKC,MAAM3C,EAAKhB,QAAQ8D,iBAAiBtB,OAC9DxB,EAAK+C,cAAgBL,KAAKC,MAAM3C,EAAKhB,QAAQ8D,iBAAiBpB,QAC9D1B,EAAKgD,YAAgBN,KAAKC,MAAM3C,EAAKhB,QAAQiE,gBAAgBzB,OAC7DxB,EAAKkD,aAAgBR,KAAKC,MAAM3C,EAAKhB,QAAQiE,gBAAgBvB,WAIjE3D,KAAKoF,SAASpF,KAAK4B,OAAO,GAAGyD,QAGxBtF,EAATY,UAAAyE,SAAS,SAASC,GACdrF,KAAKiB,QAAQqE,eAAeD,IAGvBtF,EAATY,UAAA4E,WAAS,SAAWC,EAAYC,GACxBzF,KAAKkD,cACHuC,EACO,WAATA,EAAoBzF,KAAKG,QAAU,GAAMH,KAAKG,QAAU,GAEpDqF,EAAQxF,KAAKI,YACfJ,KAAKG,QAAUwE,KAAKe,IAAIF,EAAQ,KAEhCxF,KAAKG,OAASwE,KAAKe,IAAIF,EAAQ,KAG/BxF,KAAKG,QAAU,KACjBH,KAAKG,OAAS,KAGZsF,GACFzF,KAAKiB,QAAQwE,KAAKD,GAClBxF,KAAKG,OAASqF,IAEVA,EAAQxF,KAAKI,YACfJ,KAAKiB,QAAQwE,MAAMd,KAAKe,IAAIF,EAAQ,MAEpCxF,KAAKiB,QAAQwE,KAAKd,KAAKe,IAAIF,EAAQ,MAEvB,IAAVA,GACFxF,KAAKiB,QAAQwE,MAAM,IAKpBA,EAGK,EAARD,EAAYxF,KAAKI,aAAeuE,KAAKe,IAAY,IAARF,GAAexF,KAAKI,aAAeuE,KAAKe,IAAY,IAARF,GAFrFxF,KAAKI,YAAcoF,EAKjBxF,KAAKI,YAAc,IACrBJ,KAAKI,YAAc,IAIhBL,EAATY,UAAAgF,cAAS,SAAcV,GACfA,GACFjF,KAAKiB,QAAQ2E,cAAc,CACzBC,KAAM7F,KAAKiB,QAAQiE,gBAAgBW,KACnCC,IAAK9F,KAAKiB,QAAQiE,gBAAgBY,IAClCrC,MAAOkB,KAAKC,MAAMK,GAClBtB,OAAQ3D,KAAKiB,QAAQiE,gBAAgBvB,UAKpC5D,EAATY,UAAAoF,eAAS,SAAeZ,GAChBA,GACFnF,KAAKiB,QAAQ2E,cAAc,CACzBC,KAAM7F,KAAKiB,QAAQiE,gBAAgBW,KACnCC,IAAK9F,KAAKiB,QAAQiE,gBAAgBY,IAClCrC,MAAOzD,KAAKiB,QAAQiE,gBAAgBzB,MACpCE,OAAQgB,KAAKC,MAAMO,MAKlBpF,EAATY,UAAAqF,gBAAS,SAAgBlB,GACjBA,GACF9E,KAAKiB,QAAQgF,eAAe,CAC1BJ,KAAM7F,KAAKiB,QAAQ8D,iBAAiBc,KACpCC,IAAK9F,KAAKiB,QAAQ8D,iBAAiBe,IACnCrC,MAAOkB,KAAKC,MAAME,GAClBnB,OAAQ3D,KAAKiB,QAAQ8D,iBAAiBpB,UAKrC5D,EAATY,UAAAuF,iBAAS,SAAiBlB,GAClBA,GACFhF,KAAKiB,QAAQgF,eAAe,CAC1BJ,KAAM7F,KAAKiB,QAAQ8D,iBAAiBc,KACpCC,IAAK9F,KAAKiB,QAAQ8D,iBAAiBe,IACnCrC,MAAOzD,KAAKiB,QAAQ8D,iBAAiBtB,MACrCE,OAAQgB,KAAKC,MAAMI,MAKlBjF,EAATY,UAAAwF,aAAS,WACL,IAAMC,GAAepG,KAAKiB,QAAQoF,mBAAmB5C,MAAQzD,KAAKiB,QAAQ8D,iBAAiBtB,OAAS,EAC9F6C,GAAetG,KAAKiB,QAAQoF,mBAAmB1C,OAAS3D,KAAKiB,QAAQ8D,iBAAiBpB,QAAU,EAChG4C,GAAevG,KAAKiB,QAAQoF,mBAAmB5C,MAAQzD,KAAKiB,QAAQiE,gBAAgBzB,OAAS,EAC7F+C,GAAexG,KAAKiB,QAAQoF,mBAAmB1C,OAAS3D,KAAKiB,QAAQiE,gBAAgBvB,QAAU,EAErG3D,KAAKiB,QAAQgF,eAAe,CAC1BJ,KAAMO,EACNN,IAAKQ,EACL7C,MAAOzD,KAAKiB,QAAQ8D,iBAAiBtB,MACrCE,OAAQ3D,KAAKiB,QAAQ8D,iBAAiBpB,SAExC3D,KAAKiB,QAAQ2E,cAAc,CACzBC,KAAMU,EACNT,IAAKU,EACL/C,MAAOzD,KAAKiB,QAAQiE,gBAAgBzB,MACpCE,OAAQ3D,KAAKiB,QAAQiE,gBAAgBvB,YA1iB3C,iBAcA,CAAAO,KAACuC,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,mBACVC,SAAU,w5NAuJVC,OAAQ,CAAC,w5FAoHTC,cAAeC,EAAAA,kBAAkBC,iEAsBnC5C,aAAA,CAAA,CAAAF,KAAG+C,EAAAA,UAAHP,KAAA,CAAa,gBAGbnD,WAAA,CAAA,CAAAW,KAAG+C,EAAAA,UAAHP,KAAA,CAAa,gBAGb7F,OAAA,CAAA,CAAAqD,KAAGgD,EAAAA,QAKHjH,KAAA,CAAA,CAAAiE,KAAGiD,EAAAA,UA+PH,IAAA3G,EAAA,SAAAA,MAgBaqB,EAA4C,CACvD,CACEwD,MAAO,GAAK,EAAGvC,KAAM,QAEvB,CACEuC,MAAO,EAAI,EAAGvC,KAAM,OAEtB,CACEuC,MAAO,EAAOvC,KAAM,OAEtB,CACEuC,MAAO,EAAI,EAAGvC,KAAM,OAEtB,CACEuC,MAAO,IAAOvC,KAAM,YCzlBxBsE,EAAA,WAAA,SAAAA,YA4CWA,EAAXC,QAAI,WACI,MAAO,CACHC,SAAUF,MA9CtB,iBAgBA,CAAAlD,KAACqD,EAAAA,SAADb,KAAA,CAAU,CAENc,QAAS,CACLC,EAAAA,YACAC,EAAAA,wBACAC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,iBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,yBACAC,EAAAA,cACAC,EAAAA,iBACAC,EAAAA,sBACAC,EAAAA,gBACAC,EAAAA,uBAEJC,aAAc,CACV1I,GAEJ2I,QAAS,CAAC3I"
}
